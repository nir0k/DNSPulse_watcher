// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pkg/gRPC/confighub.proto

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigHubService_GetSegmentConfig_FullMethodName = "/confighub.ConfigHubService/GetSegmentConfig"
	ConfigHubService_GetCsv_FullMethodName           = "/confighub.ConfigHubService/GetCsv"
)

// ConfigHubServiceClient is the client API for ConfigHubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigHubServiceClient interface {
	GetSegmentConfig(ctx context.Context, in *GetSegmentConfigRequest, opts ...grpc.CallOption) (*SegmentConfStruct, error)
	GetCsv(ctx context.Context, in *GetCsvRequest, opts ...grpc.CallOption) (*CsvList, error)
}

type configHubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigHubServiceClient(cc grpc.ClientConnInterface) ConfigHubServiceClient {
	return &configHubServiceClient{cc}
}

func (c *configHubServiceClient) GetSegmentConfig(ctx context.Context, in *GetSegmentConfigRequest, opts ...grpc.CallOption) (*SegmentConfStruct, error) {
	out := new(SegmentConfStruct)
	err := c.cc.Invoke(ctx, ConfigHubService_GetSegmentConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configHubServiceClient) GetCsv(ctx context.Context, in *GetCsvRequest, opts ...grpc.CallOption) (*CsvList, error) {
	out := new(CsvList)
	err := c.cc.Invoke(ctx, ConfigHubService_GetCsv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigHubServiceServer is the server API for ConfigHubService service.
// All implementations must embed UnimplementedConfigHubServiceServer
// for forward compatibility
type ConfigHubServiceServer interface {
	GetSegmentConfig(context.Context, *GetSegmentConfigRequest) (*SegmentConfStruct, error)
	GetCsv(context.Context, *GetCsvRequest) (*CsvList, error)
	mustEmbedUnimplementedConfigHubServiceServer()
}

// UnimplementedConfigHubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigHubServiceServer struct {
}

func (UnimplementedConfigHubServiceServer) GetSegmentConfig(context.Context, *GetSegmentConfigRequest) (*SegmentConfStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentConfig not implemented")
}
func (UnimplementedConfigHubServiceServer) GetCsv(context.Context, *GetCsvRequest) (*CsvList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCsv not implemented")
}
func (UnimplementedConfigHubServiceServer) mustEmbedUnimplementedConfigHubServiceServer() {}

// UnsafeConfigHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigHubServiceServer will
// result in compilation errors.
type UnsafeConfigHubServiceServer interface {
	mustEmbedUnimplementedConfigHubServiceServer()
}

func RegisterConfigHubServiceServer(s grpc.ServiceRegistrar, srv ConfigHubServiceServer) {
	s.RegisterService(&ConfigHubService_ServiceDesc, srv)
}

func _ConfigHubService_GetSegmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigHubServiceServer).GetSegmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigHubService_GetSegmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigHubServiceServer).GetSegmentConfig(ctx, req.(*GetSegmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigHubService_GetCsv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCsvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigHubServiceServer).GetCsv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigHubService_GetCsv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigHubServiceServer).GetCsv(ctx, req.(*GetCsvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigHubService_ServiceDesc is the grpc.ServiceDesc for ConfigHubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigHubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "confighub.ConfigHubService",
	HandlerType: (*ConfigHubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSegmentConfig",
			Handler:    _ConfigHubService_GetSegmentConfig_Handler,
		},
		{
			MethodName: "GetCsv",
			Handler:    _ConfigHubService_GetCsv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/gRPC/confighub.proto",
}
